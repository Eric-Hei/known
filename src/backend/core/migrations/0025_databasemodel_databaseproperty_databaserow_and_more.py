# Generated by Django 5.2.7 on 2025-10-20 11:36

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0024_add_is_masked_field_to_link_trace'),
    ]

    operations = [
        migrations.CreateModel(
            name='DatabaseModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('title', models.CharField(help_text='Title of the database', max_length=255, verbose_name='title')),
                ('description', models.TextField(blank=True, help_text='Optional description of the database', null=True, verbose_name='description')),
                ('icon', models.CharField(blank=True, help_text='Optional emoji or icon for the database', max_length=100, null=True, verbose_name='icon')),
                ('cover', models.CharField(blank=True, help_text='Optional cover image URL', max_length=500, null=True, verbose_name='cover')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('creator', models.ForeignKey(help_text='User who created the database', on_delete=django.db.models.deletion.RESTRICT, related_name='databases_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Database',
                'verbose_name_plural': 'Databases',
                'db_table': 'impress_database',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='DatabaseProperty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('name', models.CharField(help_text='Name of the property', max_length=255, verbose_name='name')),
                ('property_type', models.CharField(help_text='Type of the property (text, number, select, etc.)', max_length=50, verbose_name='type')),
                ('config', models.JSONField(blank=True, default=dict, help_text='Additional configuration (e.g., select options, date format)', verbose_name='configuration')),
                ('order', models.IntegerField(default=0, help_text='Display order of the property', verbose_name='order')),
                ('database', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='core.databasemodel')),
            ],
            options={
                'verbose_name': 'Database property',
                'verbose_name_plural': 'Database properties',
                'db_table': 'impress_database_property',
                'ordering': ('order', 'created_at'),
            },
        ),
        migrations.CreateModel(
            name='DatabaseRow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('properties', models.JSONField(default=dict, help_text='Property values as JSON (property_id -> value)', verbose_name='properties')),
                ('page_id', models.UUIDField(blank=True, help_text='Optional link to a document page', null=True, verbose_name='page ID')),
                ('order', models.IntegerField(default=0, help_text='Display order of the row', verbose_name='order')),
                ('database', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rows', to='core.databasemodel')),
            ],
            options={
                'verbose_name': 'Database row',
                'verbose_name_plural': 'Database rows',
                'db_table': 'impress_database_row',
                'ordering': ('order', 'created_at'),
            },
        ),
        migrations.CreateModel(
            name='DatabaseView',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('name', models.CharField(help_text='Name of the view', max_length=255, verbose_name='name')),
                ('view_type', models.CharField(help_text='Type of view (table, board, list, calendar, gallery)', max_length=50, verbose_name='type')),
                ('filters', models.JSONField(blank=True, default=list, help_text='Array of filter configurations', verbose_name='filters')),
                ('sorts', models.JSONField(blank=True, default=list, help_text='Array of sort configurations', verbose_name='sorts')),
                ('config', models.JSONField(blank=True, default=dict, help_text='View-specific configuration (visible properties, group by, etc.)', verbose_name='configuration')),
                ('order', models.IntegerField(default=0, help_text='Display order of the view', verbose_name='order')),
                ('database', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='core.databasemodel')),
            ],
            options={
                'verbose_name': 'Database view',
                'verbose_name_plural': 'Database views',
                'db_table': 'impress_database_view',
                'ordering': ('order', 'created_at'),
            },
        ),
        migrations.CreateModel(
            name='DatabaseAccess',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('team', models.CharField(blank=True, max_length=100)),
                ('role', models.CharField(choices=[('reader', 'Reader'), ('editor', 'Editor'), ('administrator', 'Administrator'), ('owner', 'Owner')], default='reader', max_length=20)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('database', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accesses', to='core.databasemodel')),
            ],
            options={
                'verbose_name': 'Database access',
                'verbose_name_plural': 'Database accesses',
                'db_table': 'impress_database_access',
                'ordering': ('-created_at',),
                'constraints': [models.UniqueConstraint(condition=models.Q(('user__isnull', False)), fields=('user', 'database'), name='user_database_unique_together'), models.UniqueConstraint(condition=models.Q(('team__gt', ''), ('team__isnull', False)), fields=('team', 'database'), name='team_database_unique_together'), models.CheckConstraint(condition=models.Q(models.Q(('team', ''), ('user__isnull', False)), models.Q(('team__isnull', False), ('user__isnull', True), models.Q(('team', ''), _negated=True)), _connector='OR'), name='check_either_user_or_team_database')],
            },
        ),
    ]
